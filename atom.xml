<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>wintercomming的博客</title>
  
  <subtitle>欢迎来到wintercomming技术博客之家</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-01-16T03:12:40.282Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>mingjie yao</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>诗歌闲谈（一）</title>
    <link href="http://yoursite.com/2019/01/16/%E8%AF%97%E6%AD%8C%E9%97%B2%E8%B0%88%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://yoursite.com/2019/01/16/诗歌闲谈（一）/</id>
    <published>2019-01-16T03:11:36.000Z</published>
    <updated>2019-01-16T03:12:40.282Z</updated>
    
    <content type="html"><![CDATA[<p>《闲谈》<br>      ———wintercomming<br>待日月无光华，<br>望朝晚无弥霞。<br>却问，<br>你要去哪？</p><p>若心灵而不静，<br>似叶落而不停。<br>但曰，<br>我心空明。</p><p>念我心之空悠，<br>点流水之忧愁。<br>话是，<br>人道风流。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;《闲谈》&lt;br&gt;      ———wintercomming&lt;br&gt;待日月无光华，&lt;br&gt;望朝晚无弥霞。&lt;br&gt;却问，&lt;br&gt;你要去哪？&lt;/p&gt;
&lt;p&gt;若心灵而不静，&lt;br&gt;似叶落而不停。&lt;br&gt;但曰，&lt;br&gt;我心空明。&lt;/p&gt;
&lt;p&gt;念我心之空悠，&lt;br&gt;点流水之忧愁。&lt;
      
    
    </summary>
    
    
      <category term="诗歌闲谈" scheme="http://yoursite.com/tags/%E8%AF%97%E6%AD%8C%E9%97%B2%E8%B0%88/"/>
    
  </entry>
  
  <entry>
    <title>动画相关总结</title>
    <link href="http://yoursite.com/2019/01/15/%E5%8A%A8%E7%94%BB%E7%9B%B8%E5%85%B3%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2019/01/15/动画相关总结/</id>
    <published>2019-01-15T05:01:32.000Z</published>
    <updated>2019-01-15T15:18:46.868Z</updated>
    
    <content type="html"><![CDATA[<h2 id="CSS动画"><a href="#CSS动画" class="headerlink" title="CSS动画"></a>CSS动画</h2><p> 随着CSS3和HTML5以及新时代移动端前端时代的来临，CSS3几乎成为了所有前端工程师必备的技能之一，而其中最核心也最常用的新特性之一便是CSS3动画了，这篇文章也是本人对于CSS动画的总结与思考</p><h3 id="重绘-repaint-、重排-relayout-与重组-recomposite"><a href="#重绘-repaint-、重排-relayout-与重组-recomposite" class="headerlink" title="重绘(repaint)、重排(relayout)与重组(recomposite)"></a>重绘(repaint)、重排(relayout)与重组(recomposite)</h3><p>首先，我们需要了解重绘(repaint)、重排(relayout)、重组(recomposite)的概念:<br>最常见的区别:<br>document.write:重排整个页面<br>innerHTML:重绘部分页面<br>1.重绘(repaint)<br>重绘定义:完成重排后，浏览器会重新绘制受影响的部分到屏幕，该过程称为重绘</p><p>重绘是以上三种方法中消耗性能最高的方式，所以在项目中应该尽量避免重绘，常用的有尽量使用webkit-transform: translateX(3em)的方案代替使用left: 3em ，因为left会触发重排(relayout)与重绘(repaint)，而webkit-transform只触发页面重组(recomposite)</p><p>当盒子的位置、大小以及其他属性，例如颜色、字体大小等都确定下来之后，浏览器便把这些原色都按照各自的特性绘制一遍，将内容呈现在页面上。重绘是指一个元素外观的改变所触发的浏览器行为，浏览器会根据元素的新属性重新绘制，使元素呈现新的外观。</p><p>触发重绘的条件：改变元素外观属性。如：color，background-color等。</p><p>重排定义:当DOM的变化影响了元素的几何属性（宽或高），浏览器需要重新计算元素的几何属性，同样其他元素的几何属性和位置也会因此受到影响。浏览器会使渲染树中受到影响的部分失效，并重新构造渲染树。这个过程称为重排。</p><p>触发重排的条件：任何页面布局和几何属性的改变都会触发重排，比如:<br>　　1、页面渲染初始化；(无法避免)</p><p>　　2、添加或删除可见的DOM元素；</p><p>　　3、元素位置的改变，或者使用动画；</p><p>　　4、元素尺寸的改变——大小，外边距，边框；</p><p>　　5、浏览器窗口尺寸的变化（resize事件发生时）；</p><p>　　6、填充内容的改变，比如文本的改变或图片大小改变而引起的计算值宽度和高度的改变；</p><p>　　7、读取某些元素属性：（offsetLeft/Top/Height/Width,　clientTop/Left/Width/Height,　scrollTop/Left/Width/Height,　width/height,　getComputedStyle(),　currentStyle(IE)　)</p><p>重排必定会引发重绘，但重绘不一定会引发重排。</p><h3 id="requestAnimationFrame"><a href="#requestAnimationFrame" class="headerlink" title="requestAnimationFrame"></a>requestAnimationFrame</h3><p>这是一个在我印象中并不常用的JavaScript API,之所以放在最前面是因为其特殊特性在接下来的时间内值得好好运用</p><p>requestAnimationFrame主要用途是按帧对网页进行重绘，即每一帧都刷新一次，提高动画的流畅度</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;CSS动画&quot;&gt;&lt;a href=&quot;#CSS动画&quot; class=&quot;headerlink&quot; title=&quot;CSS动画&quot;&gt;&lt;/a&gt;CSS动画&lt;/h2&gt;&lt;p&gt; 随着CSS3和HTML5以及新时代移动端前端时代的来临，CSS3几乎成为了所有前端工程师必备的技能之一，而其中最核
      
    
    </summary>
    
    
      <category term="CSS" scheme="http://yoursite.com/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>javascript的执行上下文与执行机制</title>
    <link href="http://yoursite.com/2019/01/15/javascript%E7%9A%84%E6%89%A7%E8%A1%8C%E4%B8%8A%E4%B8%8B%E6%96%87%E4%B8%8E%E6%89%A7%E8%A1%8C%E6%9C%BA%E5%88%B6/"/>
    <id>http://yoursite.com/2019/01/15/javascript的执行上下文与执行机制/</id>
    <published>2019-01-15T04:11:08.000Z</published>
    <updated>2019-01-15T04:45:17.582Z</updated>
    
    <content type="html"><![CDATA[<h2 id="关于这个系列"><a href="#关于这个系列" class="headerlink" title="关于这个系列"></a>关于这个系列</h2><p>   javascript语言有很多奥秘，譬如其运行机制，内部原理，在历史的这一段日子里，它不仅带来了复杂的交互效果和充分的性能效益，而且吸引了越来越多的开发者加入其中，但是随着时间进程的发展，很多时候开发者们因为花样繁复的JS库与框架而忽略了JS本身的内部机制。无可厚非，这样做是增加了效率，但是随着Web的蓬勃发展和JS社区的踊跃贡献，JS的思想和创造年年翻新，现有的一切被淘汰也是时间的问题。所以开发者花费时间去研究其语言的内部机制是一个不被社会洪流淘汰的最佳选择，而本系列恰好记录了本人对于JS的理解和思考，会陆续将所学更新于此，希望对大家有所帮助。</p><p>  受水平和技术有限，灵感和部分例子来自于Github里《JavaScript开发者应懂的33个概念》系列集合，有兴趣的可以在github里面找到这个合集查看完整的讲解。</p><h2 id="执行上下文"><a href="#执行上下文" class="headerlink" title="执行上下文"></a>执行上下文</h2><p>  这是一个很难具体阐述的概念，而且绕口的文字也让很多人费解，我也很难阐述他究竟是个什么东西，为什么取了个这样的名字，但是我认为执行上下文就是javascript所运行的整个环境，它将整个js文件的一些段落或某一个段落包裹起来，分别执行，可以把它理解为某一段代码是在怎么样的一个地方去执行的，如果感觉非常费解，其实你可以把整个js文件比喻成一个房屋，房屋里面拥有着不同的居住环境，不信你可以看看执行上下文的种类在房屋内充当了什么样的位置：</p><p>  1.全局执行上下文</p><p>  全局执行上下文就是属于最外层的上下文，简单的说就是除了函数里面的上下文，初始化全局执行上下文的时候它会做两件事情，会创建一个window对象，并且把this指向window对象，整个全局环境都属于全局执行上下文的环境，怎么去理解呢？想象一下刚刚上面我所说的房屋，对于整个JS文件而言他就是整个房屋，而全局执行上下文就好像人所能够移动的区域，客厅，厨房和饭厅就像一段段代码，我们的浏览器或者node环境也就是查房员，他负责查房后汇报房间里拥有什么东西，直到从门口开始把每一个房间都走完。</p><p>  2.函数执行上下文</p><p>  函数执行上下文就是全局执行上下文所不能执行的地方，它往往存在与函数内部，全局在遇到这种环境时会避开它，就好像房间里的鱼缸，鸟窝，它们都是鱼和鸟活动的区域，在调用整个函数时，查房人就会往里面放上相应的动物，直到它们把整个环境走完以后再取出来，这些动物不仅有自己的语言，行为和动作，而鸟笼，鱼缸，狗窝它们大小也不一，当关上门时它们的世界就和整个房屋隔绝了开来，我们称这一些地方叫做函数执行上下文。</p><p>  3.eval函数上下文</p><p>  eval函数会将一段字符串当做JS代码来执行，而它自己也有属于自己的上下文，这就好像一个便携帐篷，在需要的时候把它在房屋里面打开，拥有了属于自己内部的区域；</p><h2 id="执行栈"><a href="#执行栈" class="headerlink" title="执行栈"></a>执行栈</h2><p>  刚刚说了执行上下文的概念，但是不少人会注意到有一个缺陷，就是我们如何把鱼放入鱼缸，鸟放入鸟窝跑一个遍呢？或者说我鱼缸里面的虾窝，狗窝毛毯上的跳蚤窝又是怎么去查看的呢？其实这就引入了我们执行栈的概念；而管理员就是通过这个东西把它们放入对应的地方汇报信息的。</p><p>  要搞懂执行栈，首先要理解栈是一个什么东西，有人会说栈是一种基本数据结构，先入先出，但本人就经常把队列和栈搞混(可能比较愚笨),但是笨有笨的方法，我可以想象，我把栈看成是军队训练时要爬的人墙，每次要爬山墙的人都是最后一个进入人墙，但是确实最先一个离开人墙，执行栈也是一样，全局执行上下文就相当于栈的底部，而每次执行到某个函数，其内部的函数上下文就会跳到全局的身上，执行完成便翻过这道墙，当然函数上下文里面的函数执行也是一样，他会跳到上一个函数上下文上边，这就形成了一个FQ的机制直到整个墙翻完为止。</p><p>  对于常理来说，是这样，但是总有一些奇怪的人，想自己组成一个小团队，他们为了不影响别人，决定在大部队翻过墙以后再自己FQ，这些小团队有可能是一个人也有可能是几个人，而这就牵扯到了JS的异步</p><p>异步<br>  异步是一个特殊的概念，在javascript中，整个语言的执行是单线程的，就是一次只能够做一次事情，而一些特殊的事情为了不影响其他事情的执行他们选择等待，当其他事情执行结束时他再去执行自己，一切都是这么的规范和有理，和现实中的混乱相距甚远；</p><p>  而这一批有礼貌的事情是哪一些呢？</p><p>  1.setTimeout 2.promise 3.事件绑定 4.ajax 5.回调函数</p><p>  他们都很有礼貌，每次都会等到执行完成后再去执行自身，至少我之前是这么认为的；</p><p>  慢慢的和他们相处长了以后，我发现，有一些伪君子，他们虽然也在最后执行，但是他们会插到所有有礼貌的人最前面，也就是说，他们在所有异步的成员里面首先执行，而这就牵扯到了微任务和宏任务的问题了</p><p>  而微任务就是这一批伪君子，这使我不得不介绍一下他们：</p><p>  micro-task(微任务)：Promise，process.nextTick，Object.observe</p><p>  下面这张图是从掘金《这一次，彻底弄懂 JavaScript 执行机制》一文中copy所得，方便大家理解微任务和宏任务<br>  <img src="https://user-gold-cdn.xitu.io/2017/11/21/15fdcea13361a1ec?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="Alt text"><br>  此文到这里就结束了，相信大家也初步理解了机制，很多东西需要代码才能辅助理解，代码我会在之后补上，先告一段落</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;关于这个系列&quot;&gt;&lt;a href=&quot;#关于这个系列&quot; class=&quot;headerlink&quot; title=&quot;关于这个系列&quot;&gt;&lt;/a&gt;关于这个系列&lt;/h2&gt;&lt;p&gt;   javascript语言有很多奥秘，譬如其运行机制，内部原理，在历史的这一段日子里，它不仅带来了复杂的
      
    
    </summary>
    
    
      <category term="javascript基础" scheme="http://yoursite.com/tags/javascript%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2019/01/15/hello-world/"/>
    <id>http://yoursite.com/2019/01/15/hello-world/</id>
    <published>2019-01-15T01:48:37.584Z</published>
    <updated>2019-01-15T01:48:37.584Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
